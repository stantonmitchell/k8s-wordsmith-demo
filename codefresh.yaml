version: '1.0'

stages:
  - "perform_cfdemoweb_unit_test" # Performs a simple unit test against ./web/dispatcher.go
  - "build_cfdemoweb_image" # Builds the web image @ ./web/Dockerfile
  - "build_cfdemodb_image" # Builds the db image @ ./db/Dockerfile
  - "build_cfdemowords_image" # Builds the words image @ ./words/Dockerfile
  - "push_cfdemoweb_image" # Pushes the web image
  - "push_cfdemodb_image" # Pushes the db image
  - "push_cfdemowords_image" # Pushes the words image
  - "namespace_create" # Creates Namespace
  - "helm_store" # Stores the Helm chart for the primary application
  - "helm_deploy" # Deploys the primary application using Helm
  - "integration_clone" # Clones the K8 playground repo to use the ./cfdemo/curlOnly-manifest.yaml
  - "integration_deploy" # Deploys a cURL pod to perform integration test
  - "integration_cleanup" # Cleansup the cURL pod

steps:

  # CLONE PRIMARY REPOSITORY
  main_clone:
    type: git-clone
    title: '[CLONE] Primary repository'
    description: 'Cloning primary repository'
    repo: stantonmitchell/k8s-wordsmith-demo
    revision: ${{CF_BRANCH}}
    git: github
    fail_fast: true

  # UNIT TEST
  perform_cfdemoweb_unit_test:
    title: "[TEST | UNIT] vo1d/cfdemo-web"
    image: golang:alpine
    fail_fast: true
    working_directory: ${{main_clone}}
    description: Performing unit tests against vo1d/cfdemo-web...
    commands:
      - gofmt ./web/dispatcher.go
  
  # IMAGE BUILDING

  ## Build 'vo1d/cfdemo-web' image
  build_cfdemoweb_image:
    title: "[BUILD] vo1d/cfdemo-web"
    type: build
    description: Building the (vo1d/cfdemo-web) image...
    disable_push: true
    working_directory: ${{main_clone}}/web
    dockerfile: ./Dockerfile
    image_name: vo1d/cfdemo-web
    tag: ${{CF_BRANCH}}-${{CF_SHORT_REVISION}}
    metadata:
      set:
        - unit_tests: passed

  ## Build 'vo1d/cfdemo-db' image
  build_cfdemodb_image:
    title: "[BUILD] vo1d/cfdemo-db"
    type: build
    description: Building the (vo1d/cfdemo-db) image...
    disable_push: true
    working_directory: ${{main_clone}}/db
    dockerfile: ./Dockerfile
    image_name: vo1d/cfdemo-db
    tag: ${{CF_BRANCH}}-${{CF_SHORT_REVISION}}

  ## Build 'vo1d/cfdemo-words' image
  build_cfdemowords_image:
    title: "[BUILD] vo1d/cfdemo-words"
    type: build
    description: Building the (vo1d/cfdemo-words) image...
    disable_push: true
    working_directory: ${{main_clone}}/words
    dockerfile: ./Dockerfile
    image_name: vo1d/cfdemo-words
    tag: ${{CF_BRANCH}}-${{CF_SHORT_REVISION}}

  # IMAGE PUSHING

  ## Push 'vo1d/cfdemo-db' image
  push_cfdemodb_image:
    title: "[PUSH] vo1d/cfdemo-db"
    type: push
    description: Pushing the (vo1d/cfdemo-db) image...
    registry: Dockerhub
    candidate: ${{build_cfdemodb_image}}
    image_name: vo1d/cfdemo-db
    tag: ${{CF_BRANCH}}-${{CF_SHORT_REVISION}}

  ## Push 'vo1d/cfdemo-web' image
  push_cfdemoweb_image:
    title: "[PUSH] vo1d/cfdemo-web"
    type: push
    description: Pushing the (vo1d/cfdemo-web) image...
    registry: Dockerhub
    candidate: ${{build_cfdemoweb_image}}
    image_name: vo1d/cfdemo-web
    tag: ${{CF_BRANCH}}-${{CF_SHORT_REVISION}}
  
  ## Push 'vo1d/cfdemo-words' image
  push_cfdemowords_image:
    title: "[PUSH] vo1d/cfdemo-words"
    type: push
    description: Pushing the (vo1d/cfdemo-words) image...
    registry: Dockerhub
    candidate: ${{build_cfdemowords_image}}
    image_name: vo1d/cfdemo-words
    tag: ${{CF_BRANCH}}-${{CF_SHORT_REVISION}}

  # CREATE NAMESPACE
  namespace_create:
    title: "[NAMESPACE] Create namespace: 'cfdemo-${{CF_BRANCH}}-${{CF_SHORT_REVISION}}'"
    type: "freestyle"
    fail_fast: true
    image: "bitnami/kubectl:1.21"
    working_directory: '${{main_clone}}'
    commands:
      - "kubectl config use-context GCP"
      - "export DASH=`echo '-'`; export SETBRANCH=`echo cfdemo$DASH$CF_BRANCH$DASH$CF_SHORT_REVISION`"
      - "kubectl create ns $SETBRANCH"
      - "kubectl get ns"

  # HELM

  ## Store Helm chart
  helm_store:
    title: '[HELM | STORE] Primary Application Chart'
    description: 'Storing Helm chart for primary application'
    type: helm
    working_directory: ${{main_clone}}
    arguments:
      action: push
      chart_repo_url: 'cm://h.cfcr.io/cyber76/cfdemo'
      helm_version: 3.0.2
      chart_name: charts/k8s-wordsmith
      kube_context: GCP

  ## Deploy Application
  helm_deploy:
    type: helm
    title: '[HELM | DEPLOY] Deploy using Helm'
    description: 'Deploy our primary application with Helm'
    working_directory: ${{main_clone}}
    arguments:
      action: install
      chart_name: charts/k8s-wordsmith
      release_name: k8s-wordsmith
      helm_version: 3.0.2
      kube_context: GCP
      namespace: 'cfdemo-${{CF_BRANCH}}-${{CF_SHORT_REVISION}}'
      custom_values:
        - 'web.tag=${{CF_BRANCH}}-${{CF_SHORT_REVISION}}'
        - 'db.tag=${{CF_BRANCH}}-${{CF_SHORT_REVISION}}'
        - 'words.tag=${{CF_BRANCH}}-${{CF_SHORT_REVISION}}'

  # INTEGRATION TESTING

  ## Clone K8 Playground Repo
  integration_clone:
    type: git-clone
    title: '[CLONE] Playground Repository'
    description: 'Cloning cURL repository'
    repo: stantonmitchell/k8playground
    revision: main
    git: github
    fail_fast: true

   ## Deploy cURL and Test
  integration_deploy:
    title: "[TEST | INTEGRATION] Deploying and running"
    type: "freestyle"
    fail_fast: false
    image: "bitnami/kubectl:1.21"
    working_directory: '${{integration_clone}}'
    commands:
      - "kubectl config use-context GCP"
      - "export DASH=`echo '-'`; export SETBRANCH=`echo cfdemo$DASH$CF_BRANCH$DASH$CF_SHORT_REVISION`"
      - "kubectl apply -f cfdemo/curlOnly-manifest.yaml -n $SETBRANCH"
      - "echo 'Sleeping for 10s'; sleep 10s"
      - 'SETBRANCH="$SETBRANCH"; kubectl exec deploy/curl-deployment -n $SETBRANCH -- curl web.$SETBRANCH.svc.cluster.local:8081 -w "%{http_code}" -s -o /dev/null'
      - 'echo "$SETBRANCH" > branchnameTMP.txt'
    on_success:
      metadata:
        set:
          - ${{build_cfdemoweb_image.imageId}}:
            - integration_tests: passed
    on_failure:
      metadata:
        set:
          - ${{build_cfdemoweb_image.imageId}}:
            - integration_tests: failed

   ## Cleanup test
  integration_cleanup:
      title: "[CLEANUP] Integration test"
      type: "freestyle"
      image: "bitnami/kubectl:1.21"
      working_directory: '${{integration_clone}}'
      fail_fast: true
      commands:
        - "kubectl config use-context GCP"
        - "export SETBRANCH=`cat branchnameTMP.txt`"
        - "kubectl delete ns $SETBRANCH"
        - "rm -rf branchnameTMP.txt"